Running benchmark
Original size of transitions: 10
Bad transitions: 5
modExtrQuant statistics:
States in source: 8
States in target: 3
Transitions in source: 16
Transitions in target: 5
Transitions in sourceFinite: 16
Transitions in targetFinite: 5
Size of alphabet: 2
Number of examples: 1
SFT1 solving time: 369
SFT2 solving time: 296
First SFT:
digraph {
0 [label="0"];
1 [label="1"];
0 -> 1 [label="[0-9]/
x -> x + 0"];
0 -> 0 [label="[\t-\r A-Za-z]/
x -> "];
1 -> 1 [label="[\t-\r A-Za-z]/
x -> x + 0"];
1 -> 1 [label="[0-9]/
x -> x + 0"];
}
First SFT restricted:
digraph {
0 [label="0"];
1 [label="1"];
2 [label="2"];
3 [label="3"];
4 [label="4", peripheries = 2];
5 [label="5", peripheries = 2];
6 [label="6"];
7 [label="7", peripheries = 2];
0 -> 1 [label="[0-9]/
x -> x + 0"];
0 -> 2 [label="[\t-\r A-Za-z]/
x -> "];
1 -> 3 [label="[\t-\r A-Za-z]/
x -> x + 0"];
1 -> 4 [label="[0-9]/
x -> x + 0"];
2 -> 5 [label="[0-9]/
x -> x + 0"];
2 -> 2 [label="[\t-\r A-Za-z]/
x -> "];
3 -> 6 [label="[0-9]/
x -> x + 0"];
3 -> 4 [label="[\t-\r A-Za-z]/
x -> x + 0"];
4 -> 7 [label="[0-9]/
x -> x + 0"];
4 -> 4 [label="[\t-\r A-Za-z]/
x -> x + 0"];
5 -> 4 [label="[\t-\r A-Za-z]/
x -> x + 0"];
5 -> 4 [label="[0-9]/
x -> x + 0"];
6 -> 3 [label="[\t-\r A-Za-z]/
x -> x + 0"];
6 -> 3 [label="[0-9]/
x -> x + 0"];
7 -> 4 [label="[0-9]/
x -> x + 0"];
7 -> 4 [label="[\t-\r A-Za-z]/
x -> x + 0"];
}
Synthesis time: 3440
Equivalent results

SFTrepair1:
digraph {
0 [label="0"];
2 [label="2", peripheries = 2];
3 [label="3", peripheries = 2];
4 [label="4", peripheries = 2];
5 [label="5"];
6 [label="6"];
7 [label="7"];
8 [label="8"];
9 [label="9"];
10 [label="10", peripheries = 2];
11 [label="11", peripheries = 2];
12 [label="12"];
13 [label="13", peripheries = 2];
0 -> 2 [label="[0-9]/
x -> x + 0"];
2 -> 3 [label="[\t-\r A-Za-z]/
x -> "];
3 -> 4 [label="[0-9]/
x -> x + 0"];
4 -> 3 [label="[\t-\r A-Za-z]/
x -> "];
4 -> 3 [label="[0-9]/
x -> "];
5 -> 8 [label="[\t-\r A-Za-z]/
x -> "];
5 -> 2 [label="[0-9]/
x -> x + 0"];
5 -> 7 [label="[0-9]/
x -> x + 0"];
6 -> 7 [label="[0-9]/
x -> x + 0"];
6 -> 8 [label="[\t-\r A-Za-z]/
x -> "];
7 -> 9 [label="[\t-\r A-Za-z]/
x -> x + 0"];
7 -> 10 [label="[0-9]/
x -> x + 0"];
8 -> 8 [label="[\t-\r A-Za-z]/
x -> "];
8 -> 11 [label="[0-9]/
x -> x + 0"];
9 -> 12 [label="[0-9]/
x -> x + 0"];
9 -> 10 [label="[\t-\r A-Za-z]/
x -> x + 0"];
10 -> 10 [label="[\t-\r A-Za-z]/
x -> x + 0"];
10 -> 13 [label="[0-9]/
x -> x + 0"];
11 -> 10 [label="[0-9]/
x -> x + 0"];
11 -> 10 [label="[\t-\r A-Za-z]/
x -> x + 0"];
12 -> 9 [label="[\t-\r A-Za-z]/
x -> x + 0"];
12 -> 9 [label="[0-9]/
x -> x + 0"];
13 -> 10 [label="[\t-\r A-Za-z]/
x -> x + 0"];
13 -> 10 [label="[0-9]/
x -> x + 0"];
}