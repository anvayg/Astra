Running benchmark
modEscapeBrackets1 statistics:
States in source: 2
States in target: 4
Transitions in source: 6
Transitions in target: 4
Transitions in sourceFinite: 6
Transitions in targetFinite: 4
Size of alphabet: 3
Number of examples: 1
SFT1 solving time: 153
SFT2 solving time: 152
Assertion failed: ((((, &lt;
First SFT:
digraph {
0 [label="0"];
1 [label="1", peripheries = 2];
0 -> 0 [label="[>]/
x -> "];
0 -> 0 [label="[\u0000-;=?-\uffff]/
x -> "];
0 -> 1 [label="[<]/
x -> \(\(\(\("];
1 -> 1 [label="[\u0000-;=?-\uffff]/
x -> "];
1 -> 1 [label="[>]/
x -> "];
1 -> 1 [label="[<]/
x -> \(\(\(\("];
}
Synthesis time: 325
Second SFT:
digraph {
0 [label="0"];
1 [label="1", peripheries = 2];
0 -> 1 [label="[<]/
x -> \(\(\(\("];
0 -> 0 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
0 -> 0 [label="[>]/
x -> "];
1 -> 1 [label="[<]/
x -> \(\(\(\("];
1 -> 1 [label="[>]/
x -> "];
1 -> 1 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
}
Synthesis time: 190
Input on which SFTs differ: 9<
Output1: ((((
Output2: 9((((


SFTrepair1:
digraph {
0 [label="0", peripheries = 2];
1 [label="1"];
2 [label="2"];
3 [label="3", peripheries = 2];
0 -> 0 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
0 -> 0 [label="[>]/
x -> &gt;"];
1 -> 2 [label="[>]/
x -> "];
1 -> 3 [label="[<]/
x -> \(\(\(\("];
1 -> 0 [label="[>]/
x -> &gt;"];
1 -> 2 [label="[\u0000-;=?-\uffff]/
x -> "];
1 -> 0 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
2 -> 2 [label="[\u0000-;=?-\uffff]/
x -> "];
2 -> 3 [label="[<]/
x -> \(\(\(\("];
2 -> 2 [label="[>]/
x -> "];
3 -> 3 [label="[\u0000-;=?-\uffff]/
x -> "];
3 -> 3 [label="[<]/
x -> \(\(\(\("];
3 -> 3 [label="[>]/
x -> "];
}SFTrepair2:
digraph {
0 [label="0", peripheries = 2];
1 [label="1"];
2 [label="2"];
3 [label="3", peripheries = 2];
0 -> 0 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
0 -> 0 [label="[>]/
x -> &gt;"];
1 -> 3 [label="[<]/
x -> \(\(\(\("];
1 -> 0 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
1 -> 2 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
1 -> 0 [label="[>]/
x -> &gt;"];
1 -> 2 [label="[>]/
x -> "];
2 -> 3 [label="[<]/
x -> \(\(\(\("];
2 -> 2 [label="[>]/
x -> "];
2 -> 2 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
3 -> 3 [label="[>]/
x -> "];
3 -> 3 [label="[\u0000-;=?-\uffff]/
x -> x + 0"];
3 -> 3 [label="[<]/
x -> \(\(\(\("];
}