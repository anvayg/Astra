Running benchmark
Original size of transitions: 30
Bad transitions: 12
modExtrAcronym2 statistics:
States in source: 11
States in target: 3
Transitions in source: 30
Transitions in target: 3
Transitions in sourceFinite: 30
Transitions in targetFinite: 3
Size of alphabet: 3
Number of examples: 3
SFT1 solving time: 646
SFT2 solving time: 502
First SFT:
digraph {
0 [label="0"];
1 [label="1"];
0 -> 1 [label="[A-Z]/
x -> x + 0"];
0 -> 1 [label="[ ]/
x -> x + 0"];
0 -> 1 [label="[a-z]/
x -> x + -32"];
1 -> 1 [label="[a-z]/
x -> "];
1 -> 0 [label="[ ]/
x -> "];
1 -> 1 [label="[A-Z]/
x -> "];
}
First SFT restricted:
digraph {
0 [label="0"];
1 [label="1", peripheries = 2];
2 [label="2", peripheries = 2];
3 [label="3", peripheries = 2];
4 [label="4"];
5 [label="5"];
6 [label="6", peripheries = 2];
7 [label="7", peripheries = 2];
8 [label="8", peripheries = 2];
9 [label="9", peripheries = 2];
10 [label="10", peripheries = 2];
0 -> 1 [label="[A-Z]/
x -> x + 0"];
0 -> 2 [label="[a-z]/
x -> x + -32"];
1 -> 4 [label="[ ]/
x -> "];
1 -> 3 [label="[a-z]/
x -> "];
1 -> 3 [label="[A-Z]/
x -> "];
2 -> 6 [label="[A-Z]/
x -> "];
2 -> 5 [label="[ ]/
x -> "];
2 -> 3 [label="[a-z]/
x -> "];
3 -> 3 [label="[a-z]/
x -> "];
3 -> 5 [label="[ ]/
x -> "];
3 -> 6 [label="[A-Z]/
x -> "];
4 -> 7 [label="[A-Z]/
x -> x + 0"];
4 -> 8 [label="[a-z]/
x -> x + -32"];
5 -> 8 [label="[a-z]/
x -> x + -32"];
5 -> 8 [label="[A-Z]/
x -> x + 0"];
6 -> 4 [label="[ ]/
x -> "];
6 -> 3 [label="[a-z]/
x -> "];
6 -> 3 [label="[A-Z]/
x -> "];
7 -> 4 [label="[ ]/
x -> "];
7 -> 9 [label="[A-Z]/
x -> "];
7 -> 9 [label="[a-z]/
x -> "];
8 -> 5 [label="[ ]/
x -> "];
8 -> 10 [label="[A-Z]/
x -> "];
8 -> 9 [label="[a-z]/
x -> "];
9 -> 9 [label="[a-z]/
x -> "];
9 -> 5 [label="[ ]/
x -> "];
9 -> 10 [label="[A-Z]/
x -> "];
10 -> 9 [label="[a-z]/
x -> "];
10 -> 4 [label="[ ]/
x -> "];
10 -> 9 [label="[A-Z]/
x -> "];
}
Synthesis time: 7916
Equivalent results

SFTrepair1:
digraph {
1 [label="1", peripheries = 2];
2 [label="2", peripheries = 2];
3 [label="3", peripheries = 2];
4 [label="4"];
5 [label="5", peripheries = 2];
6 [label="6"];
7 [label="7", peripheries = 2];
8 [label="8", peripheries = 2];
9 [label="9", peripheries = 2];
10 [label="10", peripheries = 2];
11 [label="11"];
12 [label="12"];
13 [label="13", peripheries = 2];
14 [label="14", peripheries = 2];
15 [label="15", peripheries = 2];
16 [label="16"];
17 [label="17"];
18 [label="18", peripheries = 2];
19 [label="19", peripheries = 2];
20 [label="20", peripheries = 2];
21 [label="21", peripheries = 2];
22 [label="22", peripheries = 2];
1 -> 4 [label="[ ]/
x -> "];
1 -> 3 [label="[a-z]/
x -> "];
2 -> 3 [label="[A-Z]/
x -> x + 0"];
2 -> 6 [label="[ ]/
x -> x + 0"];
3 -> 5 [label="[A-Z]/
x -> "];
5 -> 3 [label="[a-z]/
x -> x + -32"];
5 -> 6 [label="[ ]/
x -> x + 0"];
6 -> 7 [label="[a-z]/
x -> "];
6 -> 8 [label="[A-Z]/
x -> "];
7 -> 10 [label="[A-Z]/
x -> "];
7 -> 4 [label="[ ]/
x -> "];
8 -> 6 [label="[ ]/
x -> x + 0"];
8 -> 9 [label="[a-z]/
x -> x + -32"];
8 -> 9 [label="[A-Z]/
x -> x + 0"];
9 -> 10 [label="[A-Z]/
x -> "];
10 -> 9 [label="[A-Z]/
x -> x + 0"];
10 -> 6 [label="[ ]/
x -> x + 0"];
10 -> 9 [label="[a-z]/
x -> x + -32"];
11 -> 13 [label="[A-Z]/
x -> x + 0"];
11 -> 14 [label="[a-z]/
x -> x + -32"];
12 -> 14 [label="[a-z]/
x -> x + -32"];
12 -> 13 [label="[A-Z]/
x -> x + 0"];
13 -> 16 [label="[ ]/
x -> "];
13 -> 15 [label="[a-z]/
x -> "];
13 -> 15 [label="[A-Z]/
x -> "];
14 -> 15 [label="[a-z]/
x -> "];
14 -> 17 [label="[ ]/
x -> "];
14 -> 18 [label="[A-Z]/
x -> "];
15 -> 17 [label="[ ]/
x -> "];
15 -> 15 [label="[a-z]/
x -> "];
15 -> 18 [label="[A-Z]/
x -> "];
16 -> 20 [label="[a-z]/
x -> x + -32"];
16 -> 19 [label="[A-Z]/
x -> x + 0"];
17 -> 20 [label="[a-z]/
x -> x + -32"];
17 -> 20 [label="[A-Z]/
x -> x + 0"];
18 -> 15 [label="[a-z]/
x -> "];
18 -> 15 [label="[A-Z]/
x -> "];
18 -> 16 [label="[ ]/
x -> "];
19 -> 21 [label="[a-z]/
x -> "];
19 -> 21 [label="[A-Z]/
x -> "];
19 -> 16 [label="[ ]/
x -> "];
20 -> 21 [label="[a-z]/
x -> "];
20 -> 22 [label="[A-Z]/
x -> "];
20 -> 17 [label="[ ]/
x -> "];
21 -> 17 [label="[ ]/
x -> "];
21 -> 21 [label="[a-z]/
x -> "];
21 -> 22 [label="[A-Z]/
x -> "];
22 -> 21 [label="[A-Z]/
x -> "];
22 -> 21 [label="[a-z]/
x -> "];
22 -> 16 [label="[ ]/
x -> "];
}